{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/classes.js","meteor://ðŸ’»app/lib/collections/lectures.js","meteor://ðŸ’»app/lib/collections/questions.js","meteor://ðŸ’»app/lib/collections/users.js","meteor://ðŸ’»app/lib/router.js","meteor://ðŸ’»app/server/login-config.js","meteor://ðŸ’»app/server/main.js"],"names":["d","dateString","Classes","Mongo","Collection","Meteor","isServer","publish","classesPublication","find","owner","userId","methods","classInfo","Error","Date","getDate","getMonth","getFullYear","date","getTime","insert","classId","remove","updated","update","_id","id","$set","desc","title","lectures","Lectures","parent","count","lecturesPublication","lectureId","sort","dateParsed","lectureInfo","infoToUpdate","lectureCount","Questions","parentLecture","questions","parsedDate","commentId","questionsPublication","questionInfo","getHours","getMinutes","questionId","text","$inc","stars","amount","commentDate","ObjectID","_str","$push","commentText","$pull","Users","one","wolfram","require","createClient","queryWolfram","res","queryStr","query","err","result","end","JSON","stringify","Router","configure","waitOn","Accounts","loginServicesConfigured","route","name","template","data","findOne","params","loadingTemplate","subscribe","where","get","request","response","queryString","decodeURIComponent","layoutTemplate","requireLogin","user","loggingIn","go","next","alreadyLoggedIn","onBeforeAction","only","ServiceConfiguration","configurations","service","appId","secret","module","import","v","startup"],"mappings":"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","file":"/app.js","sourcesContent":["// declare variables\nvar d, dateString;\n//classes collection\nClasses = new Mongo.Collection('classes');\nif (Meteor.isServer) {\n    // This code only runs on the server, publish classes\n    Meteor.publish('classes', function classesPublication() {\n        return Classes.find({owner: this.userId});\n    });\n}\nMeteor.methods({\n    'Classes.insert' : function(classInfo) {\n\t// Make sure the user is logged in before inserting a class\n\t    if (! this.userId) {\n\t       throw new Meteor.Error('not-authorized');\n\t    }\n        //set date \n        d = new Date();\n        dateString = d.getDate()  + \"/\" + (d.getMonth()+1) + \"/\" + d.getFullYear();\n        classInfo.dateString = dateString;\n        classInfo.date = d.getTime();\n        //set owner\n        classInfo.owner = this.userId;\n\t    Classes.insert(classInfo);\n    },\n    'Classes.remove' : function(classId) {\n    //Make sure the user is logged in before removing a class\n    \tif (! this.userId) {\n\t       throw new Meteor.Error('not-authorized');\n\t    }\n    \tClasses.remove(classId);\n  \t},\n  \t'Classes.update' : function(classInfo) {\n  \t\tif( ! this.userId){\n        //Make sure the user is logged in before updating a class\n  \t\t\tthrow new Meteor.Error('not-authorized');\n  \t\t}\n        //set date of update\n        d = new Date();\n        dateString = d.getDate()  + \"/\" + (d.getMonth()+1) + \"/\" + d.getFullYear();\n        classInfo.updated = dateString;\n  \t\tClasses.update({_id: classInfo.id}, {$set: {desc: classInfo.desc, updated: classInfo.updated, title: classInfo.title} });\n  \t},\n    'Classes.findOne' : function(classId){\n        if(! this.userId){\n        //Make sure the user is logged in before finding a class\n            throw new Meteor.Error('not-authorized');\n        }\n        Classes.find({_id: classId});\n    },\n    'Classes.updateLectureCount' : function(classId){\n        if(! this.userId){\n        //Make sure the user is logged in before updatind a class lecture count\n            throw new Meteor.Error('not-authorized');\n        }\n        Classes.update({_id: classId}, {$set:{lectures: Lectures.find({parent: classId}).count()}})\n    }\n});","//lectures collection\nLectures = new Mongo.Collection('lectures');\nif (Meteor.isServer) {\n    // This code only runs on the server\n    Meteor.publish('lectures', function lecturesPublication(lectureId) {\n        if(this.userId){\n    \t   return Lectures.find({owner: this.userId},{sort: {dateParsed: -1}});\n  \t    }else{\n  \t\t    return Lectures.find({_id: lectureId},{sort: {dateParsed: -1}});\n  \t    }\n    });\n}\nMeteor.methods({\n\t'Lectures.insert' : function(lectureInfo) {\n\t\t//Make sure the user is logged in before inserting a lecture\n        if (! this.userId) {\n\t        throw new Meteor.Error('not-authorized');\n\t    }\n        // set owner\n        lectureInfo.owner = this.userId;\n\t    Lectures.insert(lectureInfo); \n    }, \n    'Lectures.remove' : function(lectureId){\n    \t// Make sure the user is logged in before removing a lecture\n\t    if (! this.userId) { \n\t       throw new Meteor.Error('not-authorized');\n\t    }\n\t    Lectures.remove(lectureId)\n    }, \n    'Lectures.update' : function(lectureInfo){\n    \t// Make sure the user is logged in before updating a lecture\n\t    if (! this.userId) {\n\t        throw new Meteor.Error('not-authorized');\n\t    }\n\t    Lectures.update({_id: lectureInfo.id}, {$set: lectureInfo.infoToUpdate})\n    }, \n    'Lectures.updateQuestionCount' : function(lectureInfo){\n        // update question count\n        Lectures.update({_id: lectureInfo.lectureId}, {$set: {lectureCount: Questions.find({parentLecture: lectureInfo.lectureId}).count() }});\n    }\n});","// declare variables\nvar d, dateString,questions, parsedDate, commentId;\n\nQuestions = new Mongo.Collection('questions');\nif (Meteor.isServer) {\n// This code only runs on the server\n    Meteor.publish('questions', function questionsPublication() {\n        questions = Questions.find({});\n        return questions;\n    });\n}\nMeteor.methods({\n\t'Questions.insert' : function(questionInfo) {\n        // set date and insert\n        d = new Date();\n        dateString = d.getDate()  + \"/\" + (d.getMonth()+1) + \"/\" + d.getFullYear() + \" \" +d.getHours() + \":\" + d.getMinutes();\n        questionInfo.dateString = dateString;\n        questionInfo.date = d.getTime();\n\t    Questions.insert(questionInfo);\n    }, \n    'Questions.remove' : function(questionId){\n        //remove question\n        Questions.remove({_id: questionId});\n    }, \n    'Questions.update' : function(questionInfo){\n        // set date of update and update\n        d = new Date();\n        d = d.getTime();\n        questionInfo.updated = d;\n        Questions.update({ _id: questionInfo.id}, { $set: {text: questionInfo.text, updated: questionInfo.updated}});\n    }, \n    'Questions.updateStarCount' : function(questionInfo){\n        // update star count   \n        Questions.update({_id: questionInfo.id}, {$inc: { stars: questionInfo.amount}});\n    }, \n    'Questions.insertComment' : function(questionInfo){\n        // set date and push comment into comment array\n        d = new Date();\n        questionInfo.commentDate = d.getTime();\n        commentId = new Meteor.Collection.ObjectID()._str;\n        Questions.update({_id: questionInfo.id}, { $push: {\"comments\": {text: questionInfo.commentText, date: questionInfo.commentDate, id: commentId} } });\n    }, \n    'Questions.deleteComment' : function(questionInfo){\n        //pull comment from comments array\n        Questions.update(\n            {_id: questionInfo.id}, \n            { $pull: { \"comments\": { id: questionInfo.commentId } } }\n        )\n    }\n});","Users = new Mongo.Collection('Users');\n\n","// declare variables\nvar one;\n//only require npm packages in server\nif(Meteor.isServer){\n\tvar wolfram = require('wolfram').createClient(\"8EA3RR-JGLKVRG3X6\");\n\t//function used to query wolfram\n\tvar queryWolfram = function(res, queryStr){\n\t\twolfram.query(queryStr, function (err, result) {\n\t\t\tif (err){ \n\t\t\t\tthrow err;\n\t\t\t}else{\n\t\t\t  \tres.end(JSON.stringify(result));\n\t\t\t}\n\t\t});\n\t}\n}\n//wait on accounts service\nRouter.configure({\n\twaitOn:function(){\n    \tAccounts.loginServicesConfigured();\n\t}\t\n})\n//define routes\nRouter.route('/', {\n\tname: 'welcome',\n    template: 'welcome'\n});\nRouter.route('/home-instructor', {\n\tname: 'homeInstructor',\n    template: 'homeInstructor'\n});\nRouter.route('/classes', {\n\tname: 'classes',\n    template: 'classes'\n});\nRouter.route('/:classId/lectures', {\n\tname: 'lectures', \n\ttemplate: 'lectures', \n\tdata: function(){\n\t\tone = Classes.findOne({ _id: this.params.classId}); \n\t\treturn one;\n\t}\n});\nRouter.route('/:lectureId/questions-page', {\n\tname: 'questionsPage', \n\ttemplate: 'questionsPage', \n\tloadingTemplate: 'loading',\n\twaitOn: function(){\n\t\treturn [Meteor.subscribe('questions')];\n\t},\n\tdata: function(){\n\t\tMeteor.subscribe('lectures', this.params.lectureId);\n\t\tone = Lectures.findOne({ _id: this.params.lectureId}); \n\t\treturn one;\n\t}\n});\nRouter.route('/:lectureId/resources', {\n\tname: 'resource', \n\ttemplate: 'resources', \n\tloadingTemplate: 'loading',\n\twaitOn: function(){\n\t\treturn [Meteor.subscribe('questions')];\n\t},\n\tdata: function(){\n\t\tMeteor.subscribe('lectures', this.params.lectureId);\n\t\tone = Lectures.findOne({ _id: this.params.lectureId}); \n\t\treturn one;\n\t}\n});\n//restful routes\nRouter.route('queryWolfram/:queryString', {where: 'server'}).get(function () {\n     var request = this.request;\n     var response = this.response;\n     var queryString = decodeURIComponent(this.params.queryString);\n     queryWolfram(response, queryString);\n})\n// layout\nRouter.configure({\n    layoutTemplate: 'layout'\n});\n//protect pages that require log in\nvar requireLogin = function() {\n\t\tif (!Meteor.user() && !Meteor.loggingIn()) {\n\t    \tRouter.go('/');\n\t  \t} else {\n\t    \tthis.next();\n\t\t}\n}\nvar alreadyLoggedIn = function(){\n\tif(Meteor.user()){\n\t\tRouter.go('/classes');\n\t} else{\n\t\tthis.next();\n\t}\n\t\n}\nRouter.onBeforeAction(alreadyLoggedIn, {only: ['welcome']});\nRouter.onBeforeAction(requireLogin, {only: ['classes', 'homeInstructor', 'lectures']});","//configure facebook service\nServiceConfiguration.configurations.remove({\n    service: 'facebook'\n});\n \nServiceConfiguration.configurations.insert({\n    service: 'facebook',\n    appId: '171694710004750',\n    secret: '17b5a5f7bd3ab9b379474cfe1a7519f5'\n});\n","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}